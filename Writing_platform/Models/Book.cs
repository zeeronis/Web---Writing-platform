//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Writing_platform.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;

    public partial class Book
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Book()
        {
            this.Post = new HashSet<Post>();
            this.Like = new HashSet<Like>();
        }

        public int BookID { get; set; }

        [DisplayName("Book name")]
        [Required(ErrorMessage = "This Field is Required")]
        public string BookName { get; set; }

        [Required(ErrorMessage = "This Field is Required")]
        public string Content { get; set; }

        [DisplayName("Genres")]
        public Nullable<int> Genre { get; set; }
        public List<EnumModel> Genres { get; set; }

        public Nullable<System.DateTime> PublishDate { get; set; }
        public Nullable<int> Rating { get; set; }

        public Nullable<int> UserID { get; set; }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Post> Post { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Like> Like { get; set; }
        public virtual User User { get; set; }


        public static List<EnumModel> FillGenresEnumModel(int genre)
        {
            var genres = new List<EnumModel>();
            var values = (GenreType[])Enum.GetValues(typeof(GenreType));
            foreach (var item in values)
            {
                genres.Add(new EnumModel()
                {
                    GenreType = item,
                    IsSelected = false
                });
            }
            return genres;
        }

        public static List<GenreType> GetGenresByInt(int genresNum)
        {
            var result = new List<GenreType>();
            var genres = (GenreType[])Enum.GetValues(typeof(GenreType));
            foreach (var genre in genres)
            {
                if (((GenreType)genresNum).HasFlag(genre))
                {
                    result.Add(genre);
                }
            }
            return result;
        }

        public static int GenresToInt(List<EnumModel> Genres)
        {
            int result = 0;
            foreach (var item in Genres)
            {
                if(item.IsSelected)
                    result += (int)item.GenreType;
            }
            return result;
        }

        public static float GetAverageLikes(Like[] likes)
        {
            if (likes.Length == 0) return 0;

            float result = 0;
            foreach (var like in likes)
            {
                if(like.Value != null)
                    result += (float)like.Value;
            }
            return result / likes.Length;
        }
    }
}
